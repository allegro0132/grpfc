# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, macos-13, macos-15]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-13
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-15
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-2025
            c_compiler: gcc
          - os: windows-2025
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-13
            c_compiler: gcc
          - os: macos-13
            c_compiler: cl
          - os: macos-15
            c_compiler: gcc
          - os: macos-15
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
      with:
              submodules: recursive

    - uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Download Python dependencies
      run: |
        # NOTE: put your own distribution build steps here.
        python -m pip install nanobind

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B build
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build build --config ${{ matrix.build_type }}
        tar -zcvf build/libgrpfc-${{ matrix.os }}-${{ matrix.cpp_compiler }}.tar.gz build/libgrpfc*

    - name: Upload distributions
      uses: actions/upload-artifact@v4
      with:
        name: library-${{ matrix.os }}-${{ matrix.cpp_compiler }}
        path: build/*tar.gz

  tagged-release:
    name: "Tagged Release"
    runs-on: "ubuntu-latest"
    needs: [build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: library-*
          path: dist
          merge-multiple: true

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            dist/lib*